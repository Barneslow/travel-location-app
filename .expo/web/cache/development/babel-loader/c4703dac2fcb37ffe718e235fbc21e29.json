{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { StatusBar } from \"expo-status-bar\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport AllPlaces from \"./screens/AllPlaces\";\nimport AddPlace from \"./screens/AddPlace\";\nimport IconButton from \"./components/ui/IconButton\";\nimport { Colors } from \"./constants/GlobalColors\";\nimport Map from \"./screens/Map\";\nimport { useEffect, useState } from \"react\";\nimport { init } from \"./util/database\";\nimport AppLoading from \"expo-app-loading\";\nimport PlaceDetails from \"./screens/PlaceDetails\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar Stack = createNativeStackNavigator();\nexport default function App() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      dbInit = _useState2[0],\n      setDbInit = _useState2[1];\n\n  useEffect(function () {\n    init().then(function () {\n      setDbInit(true);\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  }, []);\n\n  if (!dbInit) {\n    return _jsx(AppLoading, {});\n  }\n\n  return _jsxs(_Fragment, {\n    children: [_jsx(StatusBar, {\n      style: \"dark\"\n    }), _jsx(NavigationContainer, {\n      screenOptions: {\n        headerStyle: {\n          backgroundColor: Colors.primary500\n        },\n        headerTintColor: Colors.gray700,\n        contentStyle: {\n          backgroundColor: Colors.gray700\n        }\n      },\n      children: _jsxs(Stack.Navigator, {\n        children: [_jsx(Stack.Screen, {\n          name: \"AllPlaces\",\n          component: AllPlaces,\n          options: function options(_ref) {\n            var navigation = _ref.navigation;\n            return {\n              headerRight: function headerRight(_ref2) {\n                var tintColor = _ref2.tintColor;\n                return _jsx(IconButton, {\n                  icon: \"add\",\n                  size: 24,\n                  onPress: function onPress() {\n                    return navigation.navigate(\"AddPlace\");\n                  }\n                });\n              }\n            };\n          }\n        }), _jsx(Stack.Screen, {\n          name: \"AddPlace\",\n          component: AddPlace,\n          options: {\n            title: \"Add a new Place\"\n          }\n        }), _jsx(Stack.Screen, {\n          name: \"Map\",\n          component: Map\n        }), _jsx(Stack.Screen, {\n          name: \"PlaceDetails\",\n          component: PlaceDetails\n        })]\n      })\n    })]\n  });\n}","map":{"version":3,"names":["StatusBar","NavigationContainer","createNativeStackNavigator","AllPlaces","AddPlace","IconButton","Colors","Map","useEffect","useState","init","AppLoading","PlaceDetails","Stack","App","dbInit","setDbInit","then","catch","err","console","log","headerStyle","backgroundColor","primary500","headerTintColor","gray700","contentStyle","navigation","headerRight","tintColor","navigate","title"],"sources":["/Users/darrachbarneveld/Downloads/react-native-practical-guide-code-12-native-features/code/02-adding-an-add-place-screen-navigation/App.js"],"sourcesContent":["import { StatusBar } from \"expo-status-bar\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\n\nimport AllPlaces from \"./screens/AllPlaces\";\nimport AddPlace from \"./screens/AddPlace\";\nimport IconButton from \"./components/ui/IconButton\";\nimport { Colors } from \"./constants/GlobalColors\";\nimport Map from \"./screens/Map\";\nimport { useEffect, useState } from \"react\";\nimport { init } from \"./util/database\";\nimport AppLoading from \"expo-app-loading\";\nimport PlaceDetails from \"./screens/PlaceDetails\";\n\nconst Stack = createNativeStackNavigator();\n\nexport default function App() {\n  const [dbInit, setDbInit] = useState(false);\n\n  useEffect(() => {\n    init()\n      .then(() => {\n        setDbInit(true);\n      })\n      .catch((err) => console.log(err));\n  }, []);\n\n  if (!dbInit) {\n    return <AppLoading />;\n  }\n\n  return (\n    <>\n      <StatusBar style=\"dark\" />\n      <NavigationContainer\n        screenOptions={{\n          headerStyle: { backgroundColor: Colors.primary500 },\n          headerTintColor: Colors.gray700,\n          contentStyle: { backgroundColor: Colors.gray700 },\n        }}\n      >\n        <Stack.Navigator>\n          <Stack.Screen\n            name=\"AllPlaces\"\n            component={AllPlaces}\n            options={({ navigation }) => ({\n              headerRight: ({ tintColor }) => (\n                <IconButton\n                  icon=\"add\"\n                  size={24}\n                  onPress={() => navigation.navigate(\"AddPlace\")}\n                />\n              ),\n            })}\n          />\n          <Stack.Screen\n            name=\"AddPlace\"\n            component={AddPlace}\n            options={{ title: \"Add a new Place\" }}\n          />\n          <Stack.Screen name=\"Map\" component={Map} />\n          <Stack.Screen name=\"PlaceDetails\" component={PlaceDetails} />\n        </Stack.Navigator>\n      </NavigationContainer>\n    </>\n  );\n}\n"],"mappings":";AAAA,SAASA,SAAT,QAA0B,iBAA1B;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,0BAAT,QAA2C,gCAA3C;AAEA,OAAOC,SAAP;AACA,OAAOC,QAAP;AACA,OAAOC,UAAP;AACA,SAASC,MAAT;AACA,OAAOC,GAAP;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,IAAT;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAOC,YAAP;;;;AAEA,IAAMC,KAAK,GAAGX,0BAA0B,EAAxC;AAEA,eAAe,SAASY,GAAT,GAAe;EAC5B,gBAA4BL,QAAQ,CAAC,KAAD,CAApC;EAAA;EAAA,IAAOM,MAAP;EAAA,IAAeC,SAAf;;EAEAR,SAAS,CAAC,YAAM;IACdE,IAAI,GACDO,IADH,CACQ,YAAM;MACVD,SAAS,CAAC,IAAD,CAAT;IACD,CAHH,EAIGE,KAJH,CAIS,UAACC,GAAD;MAAA,OAASC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAT;IAAA,CAJT;EAKD,CANQ,EAMN,EANM,CAAT;;EAQA,IAAI,CAACJ,MAAL,EAAa;IACX,OAAO,KAAC,UAAD,KAAP;EACD;;EAED,OACE;IAAA,WACE,KAAC,SAAD;MAAW,KAAK,EAAC;IAAjB,EADF,EAEE,KAAC,mBAAD;MACE,aAAa,EAAE;QACbO,WAAW,EAAE;UAAEC,eAAe,EAAEjB,MAAM,CAACkB;QAA1B,CADA;QAEbC,eAAe,EAAEnB,MAAM,CAACoB,OAFX;QAGbC,YAAY,EAAE;UAAEJ,eAAe,EAAEjB,MAAM,CAACoB;QAA1B;MAHD,CADjB;MAAA,UAOE,MAAC,KAAD,CAAO,SAAP;QAAA,WACE,KAAC,KAAD,CAAO,MAAP;UACE,IAAI,EAAC,WADP;UAEE,SAAS,EAAEvB,SAFb;UAGE,OAAO,EAAE;YAAA,IAAGyB,UAAH,QAAGA,UAAH;YAAA,OAAqB;cAC5BC,WAAW,EAAE;gBAAA,IAAGC,SAAH,SAAGA,SAAH;gBAAA,OACX,KAAC,UAAD;kBACE,IAAI,EAAC,KADP;kBAEE,IAAI,EAAE,EAFR;kBAGE,OAAO,EAAE;oBAAA,OAAMF,UAAU,CAACG,QAAX,CAAoB,UAApB,CAAN;kBAAA;gBAHX,EADW;cAAA;YADe,CAArB;UAAA;QAHX,EADF,EAcE,KAAC,KAAD,CAAO,MAAP;UACE,IAAI,EAAC,UADP;UAEE,SAAS,EAAE3B,QAFb;UAGE,OAAO,EAAE;YAAE4B,KAAK,EAAE;UAAT;QAHX,EAdF,EAmBE,KAAC,KAAD,CAAO,MAAP;UAAc,IAAI,EAAC,KAAnB;UAAyB,SAAS,EAAEzB;QAApC,EAnBF,EAoBE,KAAC,KAAD,CAAO,MAAP;UAAc,IAAI,EAAC,cAAnB;UAAkC,SAAS,EAAEK;QAA7C,EApBF;MAAA;IAPF,EAFF;EAAA,EADF;AAmCD"},"metadata":{},"sourceType":"module"}