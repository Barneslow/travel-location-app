{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useIsFocused } from \"@react-navigation/native\";\nimport { useEffect, useState } from \"react\";\nimport PlacesList from \"../components/Places/PlacesList\";\nimport { fetchPlaces } from \"../util/database\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction AllPlaces(_ref) {\n  var route = _ref.route;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      placesList = _useState2[0],\n      setPlacesList = _useState2[1];\n\n  var isFocused = useIsFocused();\n  useEffect(function () {\n    function loadPlaces() {\n      var places;\n      return _regeneratorRuntime.async(function loadPlaces$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(fetchPlaces());\n\n            case 2:\n              places = _context.sent;\n              setPlacesList(places);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n\n    if (isFocused) {\n      loadPlaces();\n    }\n  }, [isFocused]);\n  return _jsx(PlacesList, {\n    places: placesList\n  });\n}\n\nexport default AllPlaces;","map":{"version":3,"names":["useIsFocused","useEffect","useState","PlacesList","fetchPlaces","AllPlaces","route","placesList","setPlacesList","isFocused","loadPlaces","places"],"sources":["/Users/darrachbarneveld/Downloads/react-native-practical-guide-code-12-native-features/code/02-adding-an-add-place-screen-navigation/screens/AllPlaces.js"],"sourcesContent":["import { useIsFocused } from \"@react-navigation/native\";\nimport { useEffect, useState } from \"react\";\nimport PlacesList from \"../components/Places/PlacesList\";\nimport { fetchPlaces } from \"../util/database\";\n\nfunction AllPlaces({ route }) {\n  const [placesList, setPlacesList] = useState([]);\n  const isFocused = useIsFocused();\n\n  useEffect(() => {\n    async function loadPlaces() {\n      const places = await fetchPlaces();\n\n      setPlacesList(places);\n    }\n    if (isFocused) {\n      loadPlaces();\n    }\n  }, [isFocused]);\n  return <PlacesList places={placesList} />;\n}\n\nexport default AllPlaces;\n"],"mappings":";;AAAA,SAASA,YAAT,QAA6B,0BAA7B;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,UAAP;AACA,SAASC,WAAT;;;AAEA,SAASC,SAAT,OAA8B;EAAA,IAATC,KAAS,QAATA,KAAS;;EAC5B,gBAAoCJ,QAAQ,CAAC,EAAD,CAA5C;EAAA;EAAA,IAAOK,UAAP;EAAA,IAAmBC,aAAnB;;EACA,IAAMC,SAAS,GAAGT,YAAY,EAA9B;EAEAC,SAAS,CAAC,YAAM;IACd,SAAeS,UAAf;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA,iCACuBN,WAAW,EADlC;;YAAA;cACQO,MADR;cAGEH,aAAa,CAACG,MAAD,CAAb;;YAHF;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;;IAKA,IAAIF,SAAJ,EAAe;MACbC,UAAU;IACX;EACF,CATQ,EASN,CAACD,SAAD,CATM,CAAT;EAUA,OAAO,KAAC,UAAD;IAAY,MAAM,EAAEF;EAApB,EAAP;AACD;;AAED,eAAeF,SAAf"},"metadata":{},"sourceType":"module"}